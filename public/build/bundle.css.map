{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Modal.svelte",
    "../../Question.svelte",
    "../../Quiz.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Quiz from './Quiz.svelte';\n</script>\n\n<style>\n  :global(h4) {\n    color: green;\n  }\n</style>\n\n<h1>Quiz Application</h1>\n<Quiz />\n",
    "<script>\n  import { fly } from 'svelte/transition';\n</script>\n\n<style>\n  .modal-bg {\n    background-color: rgba(0, 0, 0, 0.8);\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n  }\n\n  .modal {\n    background-color: white;\n    padding: 20px;\n    border-radius: 15px;\n  }\n</style>\n\n<div class=\"modal-bg\">\n  <div class=\"modal\" transition:fly={{ y: 200 }}>\n    <button>close</button>\n    <slot />\n  </div>\n</div>\n",
    "<script>\n  export let addToScore;\n  export let nextQuestion;\n  export let question;\n  let isCorrect;\n  let isAnswered = false;\n  const answers = question.incorrect_answers.map((answer) => ({\n    answer,\n    correct: false,\n  }));\n\n  const allAnswers = [\n    ...answers,\n    {\n      answer: question.correct_answer,\n      correct: true,\n    },\n  ];\n\n  const shuffle = (array) => {\n    array.sort(() => Math.random() - 0.5);\n  };\n\n  const checkQuestion = (correct) => {\n    isAnswered = true;\n    isCorrect = correct;\n    correct && addToScore();\n  };\n\n  shuffle(allAnswers);\n</script>\n\n<style>\n  h4 {\n    color: red;\n  }\n\n  h4.isCorrect {\n    color: green;\n  }\n</style>\n\n<h3>\n  {@html question.question}\n</h3>\n\n{#if isAnswered}\n  <h4 class:isCorrect>\n    {#if isCorrect}You got it right{:else}You goofed up{/if}\n  </h4>\n{/if}\n\n{#each allAnswers as answer}\n  <button on:click|once={() => checkQuestion(answer.correct)}>\n    {@html answer.answer}\n  </button>\n{/each}\n\n{#if isAnswered}<button on:click={nextQuestion}>Next Question</button>{/if}\n",
    "<script>\n  import { fly } from 'svelte/transition';\n  import Question from './Question.svelte';\n  import Modal from './Modal.svelte';\n\n  let activeQuestion = 0;\n  let isModalOpen = false;\n  let quiz = getQuiz();\n  let score = 0;\n\n  async function getQuiz() {\n    const res = await fetch(\n      'https://opentdb.com/api.php?amount=10&category=12&type=multiple',\n    );\n    const quiz = await res.json();\n    return quiz;\n  }\n\n  function handleClick() {\n    quiz = getQuiz();\n  }\n\n  function nextQuestion() {\n    ++activeQuestion;\n  }\n\n  const resetQuiz = () => {\n    isModalOpen = false;\n    score = 0;\n    quiz = getQuiz();\n  };\n\n  const addToScore = () => {\n    ++score;\n  };\n\n  $: if (score > 7) {\n    isModalOpen = true;\n  }\n\n  $: questionNumber = activeQuestion + 1;\n</script>\n\n<style>\n  .fade-wrapper {\n    position: absolute;\n  }\n</style>\n\n<div>\n  <button on:click={resetQuiz}>Start New Quiz</button>\n\n  <h3>My Score: {score}</h3>\n  <h3>Question # {questionNumber}</h3>\n  {#await quiz}\n    Loading....\n  {:then data}\n    {#each data.results as question, index}\n      {#if index === activeQuestion}\n        <div in:fly={{ x: 100 }} out:fly={{ x: -200 }} class=\"fade-wrapper\">\n          <Question {addToScore} {nextQuestion} {question} />\n        </div>\n      {/if}\n    {/each}\n  {/await}\n</div>\n{#if isModalOpen}\n  <Modal>\n    <h2>You Won!</h2>\n    <p>Congratulations</p>\n    <button on:click={() => resetQuiz()}>Start over</button>\n  </Modal>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AAKU,EAAE,AAAE,CAAC,AACX,KAAK,CAAE,KAAK,AACd,CAAC;ACFD,SAAS,cAAC,CAAC,AACT,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,MAAM,CAAE,CAAC,CACT,IAAI,CAAE,CAAC,CACP,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,CACR,GAAG,CAAE,CAAC,AACR,CAAC,AAED,MAAM,cAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,CACvB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,IAAI,AACrB,CAAC;ACeD,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,GAAG,AACZ,CAAC,AAED,EAAE,UAAU,cAAC,CAAC,AACZ,KAAK,CAAE,KAAK,AACd,CAAC;ACKD,aAAa,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,AACpB,CAAC"
}